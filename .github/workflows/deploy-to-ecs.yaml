name: Deploy Whistle to ECS


on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        required: true
                                               
jobs:
  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.WHISTLE_IAM_ROLE }}
          aws-region: ${{ vars.WHISTLE_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Fill in the Image in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: api-task-definition
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.WHISTLE_ECR_REPOSITORY }}:${{ github.event.inputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: api
          cluster: ${{ vars.WHISTLE_ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy-websockets:
    name: Deploy Websockets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.WHISTLE_IAM_ROLE }}
          aws-region: ${{ vars.WHISTLE_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Fill in the Image in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: websockets-task-definition
          container-name: websockets
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.WHISTLE_ECR_REPOSITORY }}:${{ github.event.inputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: websockets
          cluster: ${{ vars.WHISTLE_ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy-worker:
    name: Deploy Worker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.WHISTLE_IAM_ROLE }}
          aws-region: ${{ vars.WHISTLE_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Fill in the Image in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: worker-task-definition
          container-name: worker
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.WHISTLE_ECR_REPOSITORY }}:${{ github.event.inputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: worker
          cluster: ${{ vars.WHISTLE_ECS_CLUSTER }}
          wait-for-service-stability: true
  deploy-scheduler:
    name: Deploy Scheduler
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.WHISTLE_IAM_ROLE }}
          aws-region: ${{ vars.WHISTLE_AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Fill in the Image in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: scheduler-task-definition
          container-name: scheduler
          image: ${{ steps.login-ecr.outputs.registry }}/${{ vars.WHISTLE_ECR_REPOSITORY }}:${{ github.event.inputs.version }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: scheduler
          cluster: ${{ vars.WHISTLE_ECS_CLUSTER }}
          wait-for-service-stability: true
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-websockets, deploy-worker, deploy-scheduler]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          generateReleaseNotes: true